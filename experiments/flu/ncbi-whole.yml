name: flu-ncbi-whole

experiments:
  subtype: &exp_options
    expand_options:
      k: 4..6
      subtype_mode: [HN, H, N]
    min_group_pts: 18
    type: A
    dataset:
      archive: flu
      metadata: flu-ncbi
    groups: |
      lambda options, metadata:
        import collections, re
        subtype_regex = re.compile('(H.*)(N.*)')
        counts = collections.defaultdict(lambda: [0, set()])
        for x in metadata:
          if x['type'] == options['type']:
            match = subtype_regex.search(x['subtype'])
            if not match or options['subtype_mode'] == 'HN':
              subtype = x['subtype']
            elif options['subtype_mode'] == 'H':
              subtype = match.group(1)
            elif options['subtype_mode'] == 'N':
              subtype = match.group(2)
            counts[subtype][0] += 1
            counts[subtype][1].add(x['subtype'])
        return {v: {'subtypes': list(counts[v][1])} for v in counts if v and counts[v][0] >= options['min_group_pts']}

steps:
  - type: select
    copy_for_options: [k]
    pick_group: |
      lambda metadata, group_options, options:
        return [{
          'subtype': entry['subtype'],
          'name': entry['name'],
          'filenames': ['ncbi/' + x['id'] + '.fasta' for x in entry['sequences']]
        } for entry in metadata if entry['type'] == options['type'] and entry['subtype'] in group_options['subtypes']]
    postprocess: |
      lambda metadata_entry, entry_sequences, options:
        seq = ''.join(seqs[0] for seqs in entry_sequences)
        return [(metadata_entry, [seq])]

  - type: kmers
    output_file: cgrs.mm-repr
    mode: counts
    k: from_options
    bits_per_element: 16

  #- type: distances
  #  input_file: cgrs.mm-repr
  #  output_prefix: dists
  #  distances: [manhat, info]
  #
  #- type: mds
  #  dists_file: dists-info.mm-dist
  #  dimensions: 10
  #  output_file: mds10-info.json
  #
  #- type: mds
  #  dists_file: dists-manhat.mm-dist
  #  dimensions: 10
  #  output_file: mds10-manhat.json

  - &classify_options
    type: classify
    features_file: cgrs.mm-repr
    output_file: classification-kmers.json
    validation_count: 10
    classifiers:
      - 10-nearest-neighbors
      - nearest-centroid-mean
      - nearest-centroid-median
      - logistic-regression
      - sgd
      - linear-svm
      - quadratic-svm
      - cubic-svm
      - decision-tree
      - random-forest
      - adaboost
      - gaussian-naive-bayes
      - lda
      - qda
      - multilayer-perceptron

  #- type: classify
  #  features_file: dists-manhat.mm-dist
  #  output_file: classification-manhat.json
  #  <<: *classify_options
  #
  #- type: classify
  #  features_file: dists-info.mm-dist
  #  output_file: classification-info.json
  #  <<: *classify_options
