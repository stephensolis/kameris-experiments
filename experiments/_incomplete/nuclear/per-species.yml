name: nuclear-per-species

experiments:
  animals: &exp_options
    expand_options: &expand_options
      k: 8..11
      sample_len: [50000, 100000, 150000, 1000000, 2000000, 4000000]
      num_samples: [5, 10]
    dataset:
      archive: genomes-animals
      metadata: nuclear-animals
    groups: |
      lambda options, metadata:
        return {s: {'species': s} for s in metadata}

  archaea:
    <<: *exp_options
    expand_options:
      <<: *expand_options
    dataset:
      archive: genomes-archaea
      metadata: nuclear-archaea

  fungi:
    <<: *exp_options
    expand_options:
      <<: *expand_options
    dataset:
      archive: genomes-fungi
      metadata: nuclear-fungi

  plants:
    <<: *exp_options
    expand_options:
      <<: *expand_options
    dataset:
      archive: genomes-plants
      metadata: nuclear-plants

steps:
  - type: select
    copy_for_options: [k]
    pick_group: |
      lambda metadata, group_options, options:
        seq_metadata = [x for x in metadata[group_options['species']]['sequences']
                              if x['type'] == 'chromosome' or x['type'] == 'linkage group']
        for x in seq_metadata:
          x['filename'] = group_options['species'] + '/nuclear/' + x['id'] + '.fasta'
        return seq_metadata
    postprocess: |
      lambda metadata_entry, entry_sequences, options:
        import random
        seq = entry_sequences[0]
        sample_idxs = random.sample(range(int(len(seq)/options['sample_len'])), options['num_samples'])
        samples = []
        for idx in sample_idxs:
          start_idx = options['sample_len']*idx
          samples.append((dict(metadata_entry, sample_start=start_idx), [seq[start_idx:start_idx+options['sample_len']]]))
        return samples

  - type: kmers
    output_file: cgrs.mm-repr
    mode: counts
    k: from_options
    bits_per_element: 32

  #- type: distances
  #  input_file: cgrs.mm-repr
  #  output_prefix: dists
  #  distances: [manhat]
  #
  #- type: mds
  #  dists_file: dists-manhat.mm-dist
  #  dimensions: 10
  #  output_file: mds10-manhat.json

  - &classify_options
    type: classify
    features_file: cgrs.mm-repr
    output_file: classification-kmers.json
    validation_count: 10
    classifiers:
      - 10-nearest-neighbors
      - nearest-centroid-mean
      - nearest-centroid-median
      - logistic-regression
      - sgd
      - linear-svm
      - quadratic-svm
      - cubic-svm
      - decision-tree
      - random-forest
      - adaboost
      - gaussian-naive-bayes
      - lda
      - qda
      - multilayer-perceptron

  #- type: classify
  #  features_file: dists-manhat.mm-dist
  #  output_file: classification-manhat.json
  #  <<: *classify_options
