name: hiv1-lanl-pol

experiments:
  subtype: &exp_options
    expand_options: &expand_options
      k: 4..7
      include_recombinants: [true, false]
    min_group_pts: 18
    dataset:
      archive: hiv1
      archive_folder: lanl-pol
      metadata: hiv1-lanl-pol
    groups: |
      lambda options, metadata:
        import collections
        counts = collections.Counter(x['subtype'] for x in metadata)
        return {v: {'subtypes': [v]} for v in counts if v and counts[v] >= options['min_group_pts']}

  A-vs-B-vs-C:
    <<: *exp_options
    expand_options:
      k: 4..7
    include_recombinants: false
    groups:
      A:
        subtypes: [A, A1, A2, A3, A6]
      B:
        subtypes: [B]
      C:
        subtypes: [C]

steps:
  - type: select
    copy_for_options: [k]
    pick_group: |
      lambda metadata, group_options, options:
        return [x for x in metadata if (options['include_recombinants'] or not x['recombinant']) and
                                       x['subtype'] in group_options['subtypes']]

  - type: kmers
    output_file: cgrs.mm-repr
    mode: frequencies
    k: from_options
    bits_per_element: 16

  - type: classify
    features_file: cgrs.mm-repr
    output_file: classification-kmers.json
    validation_count: 10
    classifiers:
      - 10-nearest-neighbors
      - nearest-centroid-mean
      - nearest-centroid-median
      - logistic-regression
      - sgd
      - linear-svm
      - quadratic-svm
      - cubic-svm
      - decision-tree
      - random-forest
      - adaboost
      - gaussian-naive-bayes
      - lda
      - qda
      - multilayer-perceptron
