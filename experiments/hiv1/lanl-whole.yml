name: hiv1-lanl-whole

experiments:
  subtype: &exp_options
    expand_options: &expand_options
      k: 4..7
      include_recombinants: [true, false]
    min_group_pts: 18 # 26 groups with recombinants, 9 groups without
    dataset:
      archive: hiv1
      archive_folder: lanl-whole
      metadata: hiv1-lanl-whole
    selection_key: subtype
    groups: |
      lambda options, metadata:
        import collections
        counts = collections.Counter(x[options['selection_key']] for x in metadata)
        return {v: {'selection_key': options['selection_key'], 'values': [v]} for v in counts if v and counts[v] >= options['min_group_pts']}

  A-vs-B-vs-C:
    <<: *exp_options
    expand_options:
      k: 4..7
    include_recombinants: false
    groups:
      A:
        selection_key: subtype
        values: [A1, A2, A3, A4, A6]
      B:
        selection_key: subtype
        values: [B]
      C:
        selection_key: subtype
        values: [C]

  recombinant-vs-normal:
    <<: *exp_options
    include_recombinants: true
    groups:
      recombinant:
        selection_key: recombinant
        values: [true]
      normal:
        selection_key: recombinant
        values: [false]

steps:
  - type: select
    copy_for_options: [k]
    pick_group: |
      lambda metadata, group_options, options:
        return [x for x in metadata if (options['include_recombinants'] or not x['recombinant']) and
                                       x[group_options['selection_key']] in group_options['values']]

  - type: kmers
    output_file: cgrs.mm-repr
    mode: frequencies
    k: from_options
    bits_per_element: 16

  - type: classify
    features_file: cgrs.mm-repr
    output_file: classification-kmers.json
    validation_count: 10
    classifiers:
      - 10-nearest-neighbors
      - nearest-centroid-mean
      - nearest-centroid-median
      - logistic-regression
      - sgd
      - linear-svm
      - quadratic-svm
      - cubic-svm
      - decision-tree
      - random-forest
      - adaboost
      - gaussian-naive-bayes
      - lda
      - qda
      - multilayer-perceptron
